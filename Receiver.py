# receiver.py
import json, base64, zlib, os, time
from Crypto.Cipher import AES, PKCS1_v1_5
from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA512
from Crypto.Random import get_random_bytes

msg = input("‚úâÔ∏è Nh·∫≠p tin nh·∫Øn handshake t·ª´ Sender: ")
if msg != "Hello!":
    print("‚ùå Handshake sai, t·ª´ ch·ªëi k·∫øt n·ªëi.")
    print("‚ùå Integrity failed. G·ª≠i NACK v·ªÅ cho Sender.")
    exit()
print("üì• Ready!")

# ====== B∆∞·ªõc 1: T·∫£i g√≥i tin ======
with open("packet.json", "r") as f:
    packet = json.load(f)

nonce = base64.b64decode(packet["nonce"])
ciphertext = base64.b64decode(packet["cipher"])
tag = base64.b64decode(packet["tag"])
enc_key = base64.b64decode(packet["enc_key"])
signature = base64.b64decode(packet["sig"])
metadata = packet["metadata"]
received_hash = packet["hash"]

# ====== B∆∞·ªõc 2: Ki·ªÉm tra to√†n v·∫πn ======
recomputed_hash = SHA512.new(nonce + ciphertext + tag).hexdigest()
if recomputed_hash != received_hash:
    print("‚ùå L·ªói to√†n v·∫πn! (hash mismatch)")
    print("‚ùå Integrity failed. G·ª≠i NACK v·ªÅ cho Sender.")
    exit()

# ====== B∆∞·ªõc 3: Ki·ªÉm tra ch·ªØ k√Ω ======
metadata_hash = SHA512.new(metadata.encode())
sender_pubkey = RSA.import_key(open("Keys/Sender_pub.pem").read())
try:
    pkcs1_15.new(sender_pubkey).verify(metadata_hash, signature)
except (ValueError, TypeError):
    print("‚ùå Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá!")
    print("‚ùå Integrity failed. G·ª≠i NACK v·ªÅ cho Sender.")
    exit()

# ====== B∆∞·ªõc 4: Gi·∫£i m√£ session_key b·∫±ng RSA ======
receiver_prikey = RSA.import_key(open("Keys/Receiver_pri.pem").read())
rsa_cipher = PKCS1_v1_5.new(receiver_prikey)
session_key = rsa_cipher.decrypt(enc_key, get_random_bytes(16))

# ====== B∆∞·ªõc 5: Gi·∫£i m√£ AES-GCM ======
aes = AES.new(session_key, AES.MODE_GCM, nonce=nonce)
try:
    decrypted_data = aes.decrypt_and_verify(ciphertext, tag)
except ValueError:
    print("‚ùå X√°c th·ª±c tag th·∫•t b·∫°i!")
    print("‚ùå Integrity failed. G·ª≠i NACK v·ªÅ cho Sender.")
    exit()

# ====== B∆∞·ªõc 6: Ki·ªÉm tra timestamp trong metadata ======
filename, timestamp_str, filetype = metadata.split("|")
timestamp = int(timestamp_str)
current_time = int(time.time())
if abs(current_time - timestamp) > 60:
    print("‚ö†Ô∏è C·∫£nh b√°o: G√≥i tin c√≥ th·ªÉ b·ªã t·∫•n c√¥ng replay (timestamp kh√¥ng h·ª£p l·ªá)")
    print("‚ùå Integrity failed. G·ª≠i NACK v·ªÅ cho Sender.")
    exit()

# ====== B∆∞·ªõc 7: Gi·∫£i n√©n v√† l∆∞u ======
plain_data = zlib.decompress(decrypted_data)
os.makedirs("uploads", exist_ok=True)
with open("uploads/received_finance.txt", "wb") as f:
    f.write(plain_data)

# ====== B∆∞·ªõc 8: Ph·∫£n h·ªìi th√†nh c√¥ng ======
print("‚úÖ ƒê√£ gi·∫£i m√£ v√† l∆∞u file: uploads/received_finance.txt")
print("‚úÖ File h·ª£p l·ªá. ACK g·ª≠i l·∫°i cho Sender.")
